//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Breakpoint;

struct BreakpointLocation;

struct Broadcaster;

struct Debugger;

struct Error;

struct Event;

struct ExecutionContextRef;

struct Module;

struct Process;

struct QueueImpl;

struct QueueItem;

struct SBBreakpoint {
    struct shared_ptr<lldb_private::Breakpoint> _field1;
};

struct SBBreakpointLocation {
    struct shared_ptr<lldb_private::BreakpointLocation> _field1;
};

struct SBBroadcaster {
    struct shared_ptr<lldb_private::Broadcaster> _field1;
    struct Broadcaster *_field2;
};

struct SBDebugger {
    struct shared_ptr<lldb_private::Debugger> m_opaque_sp;
};

struct SBError {
    struct unique_ptr<lldb_private::Error, std::__1::default_delete<lldb_private::Error>> _field1;
};

struct SBEvent {
    struct shared_ptr<lldb_private::Event> _field1;
    struct Event *_field2;
};

struct SBFrame {
    struct shared_ptr<lldb_private::ExecutionContextRef> m_opaque_sp;
};

struct SBModule {
    struct shared_ptr<lldb_private::Module> m_opaque_sp;
};

struct SBProcess {
    struct weak_ptr<lldb_private::Process> m_opaque_wp;
};

struct SBQueue {
    struct shared_ptr<lldb_private::QueueImpl> m_opaque_sp;
};

struct SBQueueItem {
    struct shared_ptr<lldb_private::QueueItem> m_queue_item_sp;
};

struct SBTarget {
    struct shared_ptr<lldb_private::Target> m_opaque_sp;
};

struct SBThread {
    struct shared_ptr<lldb_private::ExecutionContextRef> m_opaque_sp;
};

struct SBType {
    struct shared_ptr<lldb_private::TypeImpl> m_opaque_sp;
};

struct SBValue {
    struct shared_ptr<ValueImpl> m_opaque_sp;
};

struct SBValueList {
    struct unique_ptr<ValueListImpl, std::__1::default_delete<ValueListImpl>> m_opaque_ap;
};

struct Target;

struct TypeImpl;

struct ValueImpl;

struct ValueListImpl;

struct __shared_weak_count;

struct _opaque_pthread_t {
    long long _field1;
    struct __darwin_pthread_handler_rec *_field2;
    char _field3[8176];
};

struct auto_ptr<lldb::SBBroadcaster> {
    struct SBBroadcaster *__ptr_;
};

struct shared_ptr<ValueImpl> {
    struct ValueImpl *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<lldb_private::Breakpoint> {
    struct Breakpoint *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<lldb_private::BreakpointLocation> {
    struct BreakpointLocation *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<lldb_private::Broadcaster> {
    struct Broadcaster *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<lldb_private::Debugger> {
    struct Debugger *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<lldb_private::Event> {
    struct Event *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<lldb_private::ExecutionContextRef> {
    struct ExecutionContextRef *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<lldb_private::Module> {
    struct Module *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<lldb_private::QueueImpl> {
    struct QueueImpl *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<lldb_private::QueueItem> {
    struct QueueItem *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<lldb_private::Target> {
    struct Target *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<lldb_private::TypeImpl> {
    struct TypeImpl *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct unique_ptr<ValueListImpl, std::__1::default_delete<ValueListImpl>> {
    struct __compressed_pair<ValueListImpl *, std::__1::default_delete<ValueListImpl>> {
        struct ValueListImpl *__first_;
    } __ptr_;
};

struct unique_ptr<lldb_private::Error, std::__1::default_delete<lldb_private::Error>> {
    struct __compressed_pair<lldb_private::Error *, std::__1::default_delete<lldb_private::Error>> {
        struct Error *_field1;
    } _field1;
};

struct weak_ptr<lldb_private::Process> {
    struct Process *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

